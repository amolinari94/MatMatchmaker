@page "/EventViewer"
@using System.Linq
@using DataAccessLibrary
@using Structure
@using System.Collections.Generic
@using Microsoft.EntityFrameworkCore.ChangeTracking.Internal
@inject NavigationManager navManager
@inject EmailSystem.Services.IMailService mailService





<h3>EventViewer</h3>

<button @onclick="sendTestEmail"></button>



<body>
<div class="table-container">
<table class="table" style="caption-side: top; height: fit-content; flex-direction: column-reverse; transition: transform 0.5s ease;">
    <caption content="Events" class="main-title" style=" height: auto; text-align: center !important; display: table-caption !important; font-family: 'Helvetica Neue',serif;  border-top-style: none; border-right: none">
        <h2>Events</h2>
    </caption>
    <tbody>
    @if (events != null && events.Count > 0) {
        @foreach (var e in events) {
            <tr style="background-color: azure ">

                <td>@(events.ToList().IndexOf(e) + 1)</td>
                <td> <button class="btn btn-primary"  @onclick="@(()=> linkEventID(e))">@e.date</button></td>
                <td><!--db.loadData(SELECT schoolName from PROFILES where ID == @e.host--></td>
            </tr>
        }
    }

    </tbody>
</table>

    <table  cellpadding="10px" class="table" style=" @tableStyle; width:  70%; height: fit-content;  border-collapse: collapse;">
        <tr height="20px">
                    <td><label id="matchminl"  for="matchmin">Number of Matches Per Wrestler: </label></td>
                    <td><InputNumber style="border: solid; border-radius: 50px; border-color: rgb(183, 183, 183);"  TValue="int" @bind-Value="@_matchMin"/></td>
                    <td><InputNumber style="border: solid;  border-radius: 50px; border-color: rgb(183, 183, 183);" class="text-input" TValue="int" @bind-Value="@_matchMax" /></td>
                    <td></td>
                </tr>
                <tr>
                    <td><label id="skillL" for="skill">Skill level Difference: </label></td>
                    <td><InputNumber style="border: solid;  border-radius: 50px; border-color: rgb(183, 183, 183);" TValue="int" @bind-Value="_skillGap"/></td>
                    <td></td>
                    <td></td>
                </tr>
                <tr>
                    <td><label id="gradeL" for="grade">Grade Level Difference: </label></td>
                    <td><InputNumber style="border: solid;  border-radius: 50px; border-color: rgb(183, 183, 183);" TValue="int" @bind-Value="_gradeGap" id="grade" name="grade"/></td>
                    <td></td>
                    <td></td>
                </tr>
        
        <tr>
            <td><label id="matsl" for="mats">Number of Mats: </label></td>
            <td><InputNumber style="border: solid;  border-radius: 50px; border-color: rgb(183, 183, 183);" TValue="int" @bind-Value="_numMats"/></td>
            <td><label id="matchschoolL" for="matchmax">Allow Internal Matches: </label></td>
            <td><input class="text_input" type="checkbox" id="matchSchool" @bind="_internalMatches" name="matchSchool"/></td>
        </tr>
        
        <h3 class="main-title"> Weight Options: </h3>
        <tr>
            <td><label id="weightminl" >Weight Limits:</label></td><td><input class="text_input" placeholder="Min" type="text" @bind="_weightMin" id="weighthmin" name="weightmin"/></td>
            <td><label class="text_input" id="weightmaxl" for="weightmax"> </label></td><td><input class="text_input" placeholder="Max" type="text" @bind="_weightMax" id="weightmax" name="weightmax"/></td>
        </tr>
        <tr>
            <td><label id="diffL" for="diff">Max Weight Difference:</label></td><td><InputNumber class="text_input" TValue="int" @bind-Value="_weightDiff" id="diff" name="diff"/></td>
        </tr>
        
        <tr>
            <td><label>Matches Per Wrestlers: </label></td>
            <td><input class="text_input" @bind="allowedMatches" id="allowedMatches" name="allowedMatches"/></td>
            <td><Button @onclick="GenerateMatches">Generate Matches</Button></td>
        </tr>
                
                
                
        
        
        
        
    </table>
    
</div>



</body>



@code {
    
    private bool isVisible = false;
    private string tableStyle => isVisible ? "opacity: 1;" : "opacity: 0; pointer-events: none;";

    private void ToggleTable()
    {
        isVisible = !isVisible;
    }

    private int SelectedEventID;
    
    List<Structure.Event> events;
    private int testEventId = 1;
    private int testEventID2 = 2;
    private int testHostID = 1;
    private int testHostID2 = 2;
    private DateTime testDate = DateTime.Now;
    private DateTime testDate2 = DateTime.Now;
    private string DisplayMode = "display: none;";
    private Profile testProfile;
    private int hostID;
    
    
    //***local event parameters (linked to input components)***
    private string _weightMin, _weightMax;
    private int _weightDiff;//doubles
    private int _matchMin = 1;
    private int _matchMax = 10;
    private int _skillGap = 0;
    private int _gradeGap = 0;
    private int _numMats = 1;
    private bool _internalMatches;//bool
    private int allowedMatches;

    protected override void OnInitialized()
    {
        Structure.Event testEvent1 = new Structure.Event(testEventId, testHostID, testDate);
        Structure.Event testEvent2 = new Structure.Event(testEventID2, testHostID2, testDate2);
        events = new List<Structure.Event>();
        events.Add(testEvent1);
        events.Add(testEvent2);
        //code for integration with DB
        /*
        hostID = testProfile.id;
        events = getEventsFromDB(hostID);
        */
    }

    private List<Structure.Event> getEventsFromDB(int hostID) {
        List<Structure.Event> events = new List<Structure.Event>();
        
        
        
        /*DB Call to populate a List<Event> with events from the database given the hosts id
         *
         * 
         *
         * Add all events 
         *
         * SELECT DISTINCT e.*
           FROM Events e
           LEFT JOIN EventGuests eg ON e.EventID = eg.EventID
           WHERE e.HostID = @userID OR eg.GuestID = @userID;
           
           
           TODO:***OR USE EventData.cs GetEvent METHOD*****
         * 
         */
        
        

        return events;
    }

    private static string testSchoolName = "test";
    private static string testSchoolName2 = "test2";
    
    Structure.Roster roster = new Structure.Roster(testSchoolName);
    Structure.Roster[] guestRosters = new[] {new Structure.Roster(testSchoolName2)};
    
    private void GenerateMatches() {
        //instantiating new MatchGenerator Object
        MatchGenerator matchGen = new MatchGenerator(roster, guestRosters, _weightDiff,
            _numMats, _matchMin, _matchMax, _skillGap, _gradeGap, _internalMatches, SelectedEventID);
        
        //matchGet.GenerateMatches returns a LinkedList<Match> of all generated matches
        LinkedList<Match> matchList = matchGen.GenerateMatches(false, 3);

        

        
        foreach (var match in matchList) {
            /*DB CALL TO INSERT EACH MATCH FROM MATCHLIST INTO DB MATCHES TABLE
             *
             *Add individual matches per loop iteration:
             * 
             * INSERT INTO Matches (EventID, Wrestler1ID, Wrestler2ID) VALUES (EventID, Wrestler1ID, Wrestler2ID);
             * 
             */
            //
        }

        navManager.NavigateTo("/MatchViewer");
    }

    
    
    private void linkEventID(Structure.Event e) {
        SelectedEventID = e.EventID;
        showEventCriteria();


    }

    
    private void showEventCriteria() {
        DisplayMode = "";
        ToggleTable();
    }



    private async void sendTestEmail() {
        await mailService.SendEmailAsync("to.amolinari94@yahoo.com", "nice", "sick");
    }
    



}