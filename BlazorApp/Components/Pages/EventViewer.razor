@page "/EventViewer"
@using System.Linq
@using DataAccessLibrary
@using Structure
@using System.Collections.Generic
@using DataAccessLibrary.Models
@using Microsoft.EntityFrameworkCore.ChangeTracking.Internal
@inject NavigationManager navManager
@inject IEventData eventData
@inject IWrestlerData _dba
@inject Microsoft.JSInterop.IJSRuntime jsRuntime
@inject IEventGuestsData eventGuestsData 
@inject EmailSystem.Services.IMailService mailService
@inject IMatchData _dbm
@inject IMatchData matchData







<h3>EventViewer</h3>

<button @onclick="sendTestEmail"></button>



<body>
<div class="table-container">
<table class="table" style="caption-side: top; height: fit-content; flex-direction: column-reverse; transition: transform 0.5s ease;">
    <caption content="Events" class="main-title" style=" height: auto; text-align: center !important; display: table-caption !important; font-family: 'Helvetica Neue',serif;  border-top-style: none; border-right: none">
        <h2>Events</h2>
    </caption>
    <tbody>
    @if (events != null && events.Count > 0) {
        @foreach (var e in events) {

            <tr style="background-color: azure">
                        <td>@(events.IndexOf(e) + 1)</td>
                        <td>
                            <!-- Display Event ID in a button -->
                            <button class="@eventStyle" @onclick="() => HandleEventClick(e)">@e.date.ToShortDateString()</button>
                        </td>
                        <td>@e.host</td>
                        <td>@e.date</td> 
                    </tr>
<!--
            <tr style="background-color: azure ">

                <td>@(events.ToList().IndexOf(e) + 1)</td>
                <td> <button class="btn btn-primary"  @onclick="@(()=> linkEventID(e))">@e.date</button></td>
                <td>db.loadData(SELECT schoolName from PROFILES where ID == @e.host--><!--/td>
            </tr> -->

        }
    }

    </tbody>
</table>

<table  cellpadding="10px" class="table" style=" @tableStyle; width:  60%; height: fit-content;  border-collapse: collapse;">
    <tr height="20px">
        <td><label id="matchminl"  for="matchmin">Number of Matches Per Wrestler: </label></td>
        <td><InputNumber style="border: solid; border-radius: 50px; border-color: rgb(183, 183, 183);"  TValue="int" @bind-Value="@_matchMin"/></td>
        <td><InputNumber style="border: solid;  border-radius: 50px; border-color: rgb(183, 183, 183);" class="text-input" TValue="int" @bind-Value="@_matchMax" /></td>
        <td></td>
    </tr>
    <tr>
        <td><label id="skillL" for="skill">Skill level Difference: </label></td>
        <td><InputNumber style="border: solid;  border-radius: 50px; border-color: rgb(183, 183, 183);" TValue="int" @bind-Value="_skillGap"/></td>
        <td></td>
        <td></td>
    </tr>
    <tr>
        <td><label id="gradeL" for="grade">Grade Level Difference: </label></td>
        <td><InputNumber style="border: solid;  border-radius: 50px; border-color: rgb(183, 183, 183);" TValue="int" @bind-Value="_gradeGap" id="grade" name="grade"/></td>
        <td></td>
        <td></td>
    </tr>
        
    <tr>
        <td><label id="matsl" for="mats">Number of Mats: </label></td>
        <td><InputNumber style="border: solid;  border-radius: 50px; border-color: rgb(183, 183, 183);" TValue="int" @bind-Value="_numMats"/></td>
        <td><label id="matchschoolL" for="matchmax">Allow Internal Matches: </label></td>
        <td><input class="text_input" type="checkbox" id="matchSchool" @bind="_internalMatches" name="matchSchool"/></td>
    </tr>
        
    <h3 class="main-title"> Weight Options: </h3>
    <tr>
        <td><label id="weightminl" >Weight Limits:</label></td><td><input class="text_input" placeholder="Min" type="text" @bind="_weightMin" id="weighthmin" name="weightmin"/></td>
        <td><label class="text_input" id="weightmaxl" for="weightmax"> </label></td><td><input class="text_input" placeholder="Max" type="text" @bind="_weightMax" id="weightmax" name="weightmax"/></td>
    </tr>
    <tr>
        <td><label id="diffL" for="diff">Max Weight Difference:</label></td><td><InputNumber class="text_input" TValue="int" @bind-Value="_weightDiff" id="diff" name="diff"/></td>
    </tr>
        
    <tr>
        <td><label>Matches Per Wrestlers: </label></td>
        <td><input class="text_input" @bind="allowedMatches" id="allowedMatches" name="allowedMatches"/></td>
        <td><Button @onclick="GenerateMatches">Generate Matches</Button></td>
    </tr>
</table>
<table class="table" style=" @table2Style caption-side: top; margin-right: auto; height: fit-content; flex-direction: column-reverse; transition: transform 0.5s ease;">
    <caption content="Matches In This Event" class="main-title" style=" height: auto; text-align: center !important; display: table-caption !important; font-family: 'Helvetica Neue',serif;  border-top-style: none; border-right: none">
        <h2>Matches In This Event</h2>
    </caption>
    <tbody>
    @if (LocalMatchList != null && LocalMatchList.Count > 0) {
        @foreach (var m in LocalMatchList) {

            <tr style="background-color: azure">
                <td>@(LocalMatchList.IndexOf(m) + 1)</td>
                <!--<td>@m.wrestler1_firstName</td>
                <td>@m.wrestler1_lastName</td>
                <td>(@m.wrestler1_weight)</td>
                <td>vs</td>
                <td>@m.wrestler2_firstName</td>
                <td>@m.wrestler2_lastName</td>
                <td>(@m.wrestler2_weight)</td>-->
            </tr>
        }
    }

    </tbody>
</table>
    
</div>



</body>



@code {
    public string eventStyle = "btn btn-primary";
    Structure.Roster[] guestRosters = new[] {new Structure.Roster(testSchoolName2)};
    private Structure.Roster hostRoster = new Structure.Roster("test");
    private bool table1Visible = false;
    private bool table2Visible = false;
    private string tableStyle => table1Visible ? "opacity: 1;" : "opacity: 0; pointer-events: none;";
    private string table2Style => table2Visible ? "opacity: 1;" : "opacity: 0; pointer-events: none;";

    /*
    private bool ToggleTable(bool show) {
        visibilityVariable = show;
        //isVisible = !isVisible;
    }
    */

    private int SelectedEventID;
    
    List<Structure.Event> events;
    private int testEventId = 1;
    private int testEventID2 = 2;
    private int testHostID = 1;
    private int testHostID2 = 2;
    private DateTime testDate = DateTime.Now;
    private DateTime testDate2 = DateTime.Now;
    private string DisplayMode = "display: none;";
    private Profile testProfile;
    private int hostID;
    
    
    //***local event parameters (linked to input components)***
    private string _weightMin, _weightMax;
    private int _weightDiff;//doubles
    private int _matchMin = 1;
    private int _matchMax = 10;
    private int _skillGap = 0;
    private int _gradeGap = 0;
    private int _numMats = 1;
    private bool _internalMatches = false;//bool
    private int allowedMatches;

    protected override async Task OnInitializedAsync()
    {
        
        try
        {
             
            int localHostID = await GetSavedProfileID();
            string HostschoolName = "test";
            // Retrieve events for the user (replace 4 with the actual userProfileID)
            var eventModels = await eventData.GetEventsByUserProfileID(localHostID); // Replace 4 with actual userProfileID
        
            // Map EventModel instances to Structure.Event instances
            events = eventModels.Select(em => new Structure.Event(em.event_id, em.host_profile_id, em.event_date)).ToList();
            
            var hostWrestlers = await _dba.GetWrestlersByProfileID(localHostID);
            hostRoster = new Structure.Roster("test");
            
            foreach (var wrestler in hostWrestlers)
            {
                hostRoster.AddWrestler(wrestler.wrestler_id, wrestler.profile_id, wrestler.firstName, wrestler.lastName, wrestler.weight, wrestler.skillLevel, wrestler.grade, wrestler.gender, wrestler.sameGenderOnly);
            }

            foreach (var r in hostRoster.rosterList.Values) {

                Console.WriteLine(r);
                
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading events: {ex.Message}");
            // Handle error or display appropriate message to the user
        }

        
        
        
        
        
        
        /*Structure.Event testEvent1 = new Structure.Event(testEventId, testHostID, testDate);
        Structure.Event testEvent2 = new Structure.Event(testEventID2, testHostID2, testDate2);
        events = new List<Structure.Event>();
        events.Add(testEvent1);
        events.Add(testEvent2); 
        //code for integration with DB
        /*
        hostID = testProfile.id;
        events = getEventsFromDB(hostID);*/
        
    }

    public int localHostId;
    public int localEventID;
    protected internal async void getHostID() {
        localHostId = await GetSavedProfileID();
    }

    public void showMatchList(int eventID,List<MatchModel> matchList) {
        //sets invisible match list table to true.  
        //in this func, populate the table from the match model and then set the table style display mode to empty
        //matchListDisplay = "";
        table1Visible = false;
        table2Visible = true;
        //ToggleTable(table2Visible, true);
        //ToggleTable(table1Visible, false);
        //DisplayMode = "display: none;";
        StateHasChanged();




    }
    
    
    private void showEventCriteria() {
        //DisplayMode = show ? "" : "display: none;";
        //DisplayMode = "";
        table1Visible = true;
        table2Visible = false;
        //ToggleTable(table1Visible,true);
        //ToggleTable(table2Visible, false);
        //matchListDisplay = "display: none;";
        StateHasChanged();
    }

    protected internal List<MatchModel> LocalMatchList;
    
    public List<Structure.Roster> guestRostersTest = new List<Structure.Roster>();
    
    
    private async Task HandleEventClick(Structure.Event selectedEvent) {

        localEventID = selectedEvent.EventID;
        try
        {
            List<int> guestProfileIDs = await GetGuestProfileIDsForEvent(selectedEvent.EventID);
            
            Console.WriteLine("Guest Profile IDs:");
            foreach (var guestProfileID in guestProfileIDs)
            {
                Console.WriteLine(guestProfileID);
            }
            // Create and populate guest rosters based on guest profile IDs
            foreach (int guestProfileID in guestProfileIDs)
            {
                // Retrieve wrestlers for the current guest profile ID
                List<WrestlerModel> guestWrestlers = await _dba.GetWrestlersByProfileID(guestProfileID);

                // Create a new guest roster and add wrestlers to it
                Structure.Roster guestRoster = new Structure.Roster("email");

                foreach (var wrestler in guestWrestlers)
                {
                    guestRoster.AddWrestler(
                        wrestler.wrestler_id,
                        wrestler.profile_id,
                        wrestler.firstName,
                        wrestler.lastName,
                        wrestler.weight,
                        wrestler.skillLevel,
                        wrestler.grade,
                        wrestler.gender,
                        wrestler.sameGenderOnly
                    );
                }
                // Add the populated guest roster to the list of guest rosters
                guestRostersTest.Add(guestRoster);
            }

            foreach (var r in guestRostersTest)
            {
                foreach (var wrestler in r.rosterList)
                {
                    Console.WriteLine(wrestler);
                }
                
            }
            
            
            
            /*
             *
             * 
             */
            
            linkEventID(selectedEvent);
            getHostID(); //gets current users id
            localEventID = selectedEvent.EventID; //getting id of selected event
            
            LocalMatchList = await _dbm.GetMatchesByEvent(localEventID);//gets all matches from selected event 
            if (LocalMatchList.Count > 0) {//if the local match List<MatchModel> is populated, call showMatchList()
                showMatchList(localEventID, LocalMatchList);
                //DisplayMode = "display: none";//sets events criteria display to invisible (since matches already exist
            }
            Console.WriteLine($"Clicked Event ID: {selectedEvent.EventID}");
            if (LocalMatchList.Count < 1) {
                showEventCriteria();
                Console.WriteLine("\n\n***Showing Event Criteria***\n\n");
                
                
            }

            
            
            // Perform actions for the clicked event
            // Pass the selected event ID to another method
            Console.WriteLine($"Stored Event ID: {selectedEvent.EventID}");
            Console.WriteLine("HandleEventClick completed successfully.");
        }
        catch (Exception ex)
        {
            // Handle any exceptions that may occur during event handling
            Console.WriteLine($"Error handling event click: {ex.Message}");
        }
    }

    private List<Structure.Event> getEventsFromDB(int hostID) {
        List<Structure.Event> events = new List<Structure.Event>();
        /*DB Call to populate a List<Event> with events from the database given the hosts id
         *
         * 
         *
         * Add all events 
         *
         * SELECT DISTINCT e.*
           FROM Events e
           LEFT JOIN EventGuests eg ON e.EventID = eg.EventID
           WHERE e.HostID = @userID OR eg.GuestID = @userID;
           TODO:***OR USE EventData.cs GetEvent METHOD*****
         * 
         */
        return events;
    }

    private static string testSchoolName = "test";
    private static string testSchoolName2 = "email";
    
    Structure.Roster roster = new Structure.Roster(testSchoolName);
    // Populate host roster with wrestlers for the host profile
    
    
    

    private async Task GenerateMatches() {
        List<int> guestProfileIDs = await GetGuestProfileIDsForEvent(localEventID);
        
        Console.WriteLine("Guest Profile IDs:");
        foreach (var guestProfileID in guestProfileIDs)
        {
            Console.WriteLine(guestProfileID);
        }
        // Create and populate guest rosters based on guest profile IDs
        foreach (int guestProfileID in guestProfileIDs)
        {
            // Retrieve wrestlers for the current guest profile ID
            List<WrestlerModel> guestWrestlers = await _dba.GetWrestlersByProfileID(guestProfileID);

            // Create a new guest roster and add wrestlers to it
            Structure.Roster guestRoster = new Structure.Roster("email");

            foreach (var wrestler in guestWrestlers)
            {
                guestRoster.AddWrestler(
                    wrestler.wrestler_id,
                    wrestler.profile_id,
                    wrestler.firstName,
                    wrestler.lastName,
                    wrestler.weight,
                    wrestler.skillLevel,
                    wrestler.grade,
                    wrestler.gender,
                    wrestler.sameGenderOnly
                );
            }
            // Add the populated guest roster to the list of guest rosters
            guestRostersTest.Add(guestRoster);
        }

        foreach (var r in guestRostersTest)
        {
            foreach (var wrestler in r.rosterList)
            {
                Console.WriteLine(wrestler);
            }
                
        }
        
        
        
        
        /*
         *moved the above code block (used to be below the match print statements)
         *
         *
         * 
         */
        //TODO: fix why guest roster list may not always be populated/initialized in certain conditions 
        Structure.Roster[] guestRosterArray = new[] { guestRostersTest[0] };
        Console.WriteLine($"Wrestlers in Guest Roster:{guestRostersTest[0].rosterList.Count}");
        //instantiating new MatchGenerator Object
        Console.WriteLine("Started generating");
        MatchGenerator matchGen = new MatchGenerator(hostRoster, guestRosterArray, _weightDiff,
            _numMats, _matchMin, _matchMax, _skillGap, _gradeGap, _internalMatches, SelectedEventID);
        Console.WriteLine("Initializing");
        //matchGet.GenerateMatches returns a LinkedList<Match> of all generated matches
        LinkedList<Match> matchList = matchGen.GenerateMatches(false, 1);
        Console.WriteLine("Generated");
        Console.WriteLine(matchList.Count);
        foreach (var match in matchList) {
            // Retrieve wrestler 1 details
            var wrestler1 = await _dba.GetWrestlerById(match.wrestler1.wrestler.wrestler_id);
            if (wrestler1 != null)
            {
                match.Wrestler1FirstName = wrestler1.firstName;
                match.Wrestler1LastName = wrestler1.lastName;
                match.Wrestler1Weight = wrestler1.weight;
                string wrestler1Info = $"{wrestler1.firstName} {wrestler1.lastName} ({wrestler1.weight} lbs)";
                Console.WriteLine($"Wrestler 2: {wrestler1Info}");
            }
            
            var wrestler2 = await _dba.GetWrestlerById(match.wrestler2.wrestler.wrestler_id);
            if (wrestler2 != null)
            {
                match.Wrestler2FirstName = wrestler2.firstName;
                match.Wrestler2LastName = wrestler2.lastName;
                match.Wrestler2Weight = wrestler2.weight;
                string wrestler2Info = $"{wrestler2.firstName} {wrestler2.lastName} ({wrestler2.weight} lbs)";
                Console.WriteLine($"Wrestler 2: {wrestler2Info}");
            }
            
            MatchModel newMatch = new MatchModel
            {
                event_id = SelectedEventID,
                wrestler1_id = match.wrestler1.wrestler.wrestler_id,
                wrestler2_id = match.wrestler2.wrestler.wrestler_id,
               
            };

            // Insert the match into the database
            int newMatchId = await matchData.InsertMatch(newMatch);
            Console.WriteLine($"Match inserted with ID: {newMatchId}");
        } 

        

        
       

        navManager.NavigateTo("/MatchViewer");
    }

    
    
    private void linkEventID(Structure.Event e) {
        SelectedEventID = e.EventID;

        

        //showEventCriteria();



    }

    
    



    private async void sendTestEmail() {
        await mailService.SendEmailAsync("to.amolinari94@yahoo.com", "nice", "sick");
    }
    
    protected internal async Task<int> GetSavedProfileID()
    {
        string cookieName = "profile_id";

        try
        {
            // Invoke the 'getCookie' JavaScript function to retrieve the profile ID cookie value
            string profileIDCookie = await jsRuntime.InvokeAsync<string>("getCookie", cookieName);
            profileIDCookie = profileIDCookie?.Trim('"', ' '); // Trim removes leading/trailing quotation marks and spaces

            if (int.TryParse(profileIDCookie, out int profileID))
            {
                // Successful parsing: return the parsed profile ID
                return profileID;
            }
            else
            {
                // Invalid cookie value: log an error and return a default value
                Console.WriteLine("Invalid profile ID cookie value: " + profileIDCookie);
                return -1; // Return a default value (e.g., -1) for invalid profile ID
            }
        }
        catch (Exception ex)
        {
            // Handle any JavaScript interop invocation errors
            Console.WriteLine($"Error retrieving profile ID cookie: {ex.Message}");
            return -1; // Return a default value (e.g., -1) in case of error
        }
    }
    
    private async Task CreateHostRoster(int hostProfileID)
    {
        // Retrieve wrestlers for the host profile ID and populate the host roster
        var hostWrestlers = await _dba.GetWrestlersByProfileID(hostProfileID);
        
        foreach (var wrestler in hostWrestlers)
        {
            hostRoster.AddWrestler(wrestler.wrestler_id, wrestler.profile_id, wrestler.firstName, wrestler.lastName, wrestler.weight, wrestler.skillLevel, wrestler.grade, wrestler.gender, wrestler.sameGenderOnly);
        }
    }

    private async Task CreateGuestRosters(int[] guestProfileIDs)
    {
        List<Structure.Roster> RosterList = new List<Structure.Roster>();
        for (int i = 0; i < guestProfileIDs.Length; i++)
        {
            var guestWrestlers = await _dba.GetWrestlersByProfileID(guestProfileIDs[i]);
            var guestRoster = new Structure.Roster($"Guest School Name {i + 1}");
            foreach (var wrestler in guestWrestlers)
            {
                guestRoster.AddWrestler(wrestler.wrestler_id, wrestler.profile_id, wrestler.firstName, wrestler.lastName, wrestler.weight, wrestler.skillLevel, wrestler.grade, wrestler.gender, wrestler.sameGenderOnly);
            }
            RosterList.Add(guestRoster);
            
        }

        int count = 0;
        foreach (var roster in RosterList)
        {
            count++;
        }

        Structure.Roster[] guestRosters = new Structure.Roster[count];
        RosterList.ToArray();
        for (int i = 0; i < count-1; i++)
        {
            guestRosters[i] = RosterList.ToList()[i];
        }
    }
    
    private async Task<List<int>> GetGuestProfileIDsForEvent(int eventID) {
        // Implement a method to retrieve guest profile IDs for the given event ID
        var eventGuests = await eventGuestsData.GetEventGuestsByEventId(eventID);
        return eventGuests.Select(eg => eg.guest_profile_id).ToList();
    }

    




}