@page "/Event"
@using BlazorApp.Models
@using System.Linq
@using DataAccessLibrary
@using Microsoft.AspNetCore.Antiforgery
@using Microsoft.AspNetCore.Components.Forms
@inject IProfileData _db
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager
@using Microsoft.AspNetCore.Antiforgery
@using Structure
@using Microsoft.JSInterop
@using System.Text.Json
@using Blazored.LocalStorage
@using DataAccessLibrary.Models
@rendermode InteractiveServer
@inject ILocalStorageService _localStorage
@inject DataAccessLibrary.IEventData eventData
@inject Microsoft.JSInterop.IJSRuntime jsRuntime
@inject ISqlDataAccess sql
@inject IProfileData profileData







<PageTitle> Event Creator </PageTitle>
<!--<link rel="stylesheet" href="~BlazorApp/wwwroot/app.css" />-->
<body>
    

<!--<input class="text_input" type="text" id="school" name="school"/>-->

<div>
    <h2 class="main-title" style="text-align: center">Event Creator</h2>
    <h3 class="main-title">Match Info:</h3>
</div>

<div class="table-container">
            
    <table cellpadding="30px" style="width: 60%; height: fit-content;  border-collapse: collapse;">
        <tr height="20px">
            <td><label id="matchminl"  for="matchmin">Number of Matches Per Wrestler: </label></td>
            <td><InputNumber style="border: solid; border-radius: 50px; border-color: rgb(183, 183, 183);"  TValue="int" @bind-Value="@_matchMin"/></td>
            <td><InputNumber style="border: solid;  border-radius: 50px; border-color: rgb(183, 183, 183);" class="text-input" TValue="int" @bind-Value="@_matchMax" /></td>
            <td></td>
        </tr>
        <tr>
            <td><label id="skillL" for="skill">Skill level Difference: </label></td>
            <td><InputNumber style="border: solid;  border-radius: 50px; border-color: rgb(183, 183, 183);" TValue="int" @bind-Value="_skillGap"/></td>
            <td></td>
            <td></td>
        </tr>
        <tr>
            <td><label id="gradeL" for="grade">Grade Level Difference: </label></td>
            <td><InputNumber style="border: solid;  border-radius: 50px; border-color: rgb(183, 183, 183);" TValue="int" @bind-Value="_gradeGap" id="grade" name="grade"/></td>
            <td></td>
            <td></td>
        </tr>

        <tr>
            <td><label id="matsl" for="mats">Number of Mats: </label></td>
            <td><InputNumber style="border: solid;  border-radius: 50px; border-color: rgb(183, 183, 183);" TValue="int" @bind-Value="_numMats"/></td>
            <td><label id="matchschoolL" for="matchmax">Allow Internal Matches: </label></td>
            <td><input class="text_input" type="checkbox" id="matchSchool" @bind="_internalMatches" name="matchSchool"/></td>
        </tr>
        <tr style="height: auto">
            
            <td><label>Match Date: </label></td>
            <!--<td> <TelerikDateTimePicker Format="dd/MM/yyyy HH:mm" Width="200px"></TelerikDateTimePicker> </td>-->
            <td><InputDate @bind-Value="selectedDate" ></InputDate></td>
            
        </tr>
    </table>
    
    <table style="caption-side: top; text-align: center;  width: 25%; border-left-style: solid; border-color: #ededed; border-right: none; border-top: none; border-color: #ededed; border-collapse: collapse">
                    
        <caption class="main-title" style=" font-family: 'Helvetica Neue',serif; text-align: center; border-top-style: none; border-right: none">
            <div>Guests</div>
            
            <div class="dropdown">
                <input @ref="searchBox" @bind="searchTerm" @oninput="OnInput" class="text_input" type="text" placeholder="Search Schools..."/>
                <div class="dropdown-content" style="@DisplayMode">

                    @foreach (var item in FilteredItems) {
                        <button @onclick=" () => SelectItem(item)">@item</button>
                    }
                </div>
            </div>
        </caption>
         
        <tbody>
        
        @if (LocalGuestList.Count > 0) {
            @foreach (var guest in LocalGuestList) {


                <tr style="background-color: azure ">
                    <td>@(LocalGuestList.IndexOf(guest) + 1)</td>
                    <td>@guest</td>
                </tr>
            }

        }
        @for (int i = 0; i < emptySpaces; i++) {
            <tr><td></td><td></td></tr>
        }
        </tbody>
    </table>
    
                
                
</div>

    <h3 class="main-title"> Weight Options: </h3>
    <label id="weightminl" >Weight Limits:</label>
    <input class="text_input" placeholder="Min" type="text" @bind="_weightMin" id="weighthmin" name="weightmin"/>
    <label class="text_input" id="weightmaxl" for="weightmax"> </label>
    <input class="text_input" placeholder="Max" type="text" @bind="_weightMax" id="weightmax" name="weightmax"/>
    <label id="diffL" for="diff">Max Weight Difference:</label>
    <input class="text_input" type="text" @bind="_weightDiff" id="diff" name="diff"/>


        
        
    <!--button class="btn btn-secondary">Add Match</!--button-->
    <br>
    <button type="submit" class="btn btn-primary" @onclick="addEvent">Add Event</button>

</body>

@code {
    
    
    private List<string>LocalGuestList = new List<string>();//local copy of guestlist
    
    private string DisplayMode = "display: none;";
    
    
    
    //***local event parameters (linked to input components)***
    private string _weightMin, _weightMax, _weightDiff;//doubles
    private int _matchMin = 1;
    private int _matchMax = 10;
    private int _skillGap = 0;
    private int _gradeGap = 0;
    private int _numMats = 1;
    private bool _internalMatches;//bool
    private DateTime selectedDate = new DateTime(); 
    
    
    private void addToLocalGuests(string guestName) {
        LocalGuestList.Add(guestName);
        StateHasChanged();
    }

    
    private void addToGuests(Structure.Event evt, string guestName) {
        
    }
    
    
    
    private async Task<string> GetSavedEmail()
    {
        return await jsRuntime.InvokeAsync<string>("localStorage.getItem", "email");
    }

    private async void getProfile() {
        string email = await GetSavedEmail();
        //profile = (/*db call to get the profile info*/)
        
    }

    private void buildRosterObj(string schoolName) {
        
        
        
    }



    
    Profile hostProfile;
    Roster[] GuestRosters;
    
    
    
    
    
    private async void addEvent() {
        string email = await GetSavedEmail();
        string EventID = $"{hostProfile.schoolName}_Event{hostProfile.Events.Count + 1}";
        string guestListID = $"{EventID}_GuestList";
        Structure.Event evt = new Structure.Event(EventID, hostProfile.school, guestListID, selectedDate);
        //double weightMinDouble = Double.Parse(_weightMin);
        //double weightMaxDouble = Double.Parse(_weightMax);
        double weightDiffDouble = Double.Parse(_weightDiff);
        //evt.weightMax = weightMaxDouble;
        //evt.weightMin = weightMinDouble;
        
        evt.gradeGap = _gradeGap;
        evt.minMatches = _matchMin;
        evt.maxMatches = _matchMax;
        evt.skillGap = _skillGap;
        evt.weightDiff = weightDiffDouble;
        evt.numMats = _numMats;
        evt.allowedMatches = _matchMax;
        evt.internalMatches = _internalMatches;
        evt.guestList = LocalGuestList;

        /**
        * uncomment this block when'getRosterBySchoolName' can populate a roster from a given guest school name
        */
        for (int i = 0; i < evt.guestList.Count; i++) {
            
            //evt.guests[i] = new School(getRosterBySchoolName(evt.guestList[i]));
        }

        foreach (var school in evt.guestRosters) {
            //school.roster = getRosterFromSchoolName(school.Name);
        }
        
        
        /**
         * add dbcall to use guest schoolnames to get an array of guest rosters
         */
         
        //MatchGenerator matchGen = new MatchGenerator(hostProfile.school.roster,);
        //evt.matchList = matchGen.GenerateMatches(false, evt.allowedMatches);
        hostProfile.Events.Append(evt);//adds the event to the hosts profile object
        
        //Add DB call to add event ID to the Events list in guest Profiles
        
    }

    private School getRosterBySchoolName(string schoolName) {
        /**
         * call DB to populate a School object with data from guest schools.
         * access guest school info using schoolName
         */
        return null;
    }
    
    private ElementReference searchBox;
    private int counter = 0;
    private string searchTerm = "";
    private List<string> SchoolsList = new List<string> { "East Missouri", "North Missouri", "South Missouri", "West Missouri" };
    private List<string> FilteredItems = new List<string>();

    protected override void OnInitialized()
    {
        FilteredItems = SchoolsList;
        selectedDate = DateTime.Now;
        ProfileData hostProfileData = new ProfileData(sql);

    }

    private void OnInput(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? "";
        FilteredItems = SchoolsList.Where(i => i.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
        DisplayMode = "";
    }

    public int emptySpaces = 10;
    private async Task SelectItem(string item)
    {
        Console.WriteLine($"Selected: {item}");
        searchTerm = item;
        FilteredItems.Clear();
        addToLocalGuests(searchTerm);
        //addToGuests(item);
        //newEvent.addToGuestList(searchTerm);
        searchTerm = String.Empty;
        counter++;
        emptySpaces--;
        
        StateHasChanged();
    }
    
            
    /*Event Database table:
     *---------------------------------------------------------------------------------------------------
     | Event ID (Primary Key) | HostID | GuestListID (primary key for guest list for this event) | Date |
     * -----------------------*--------*---------------------------------------------------------*------*
     *                        *        *                                                         *      *
     *                        *        *                                                         *      *
     *                        *        *                                                         *      *
     *                        *        *                                                         *      *
     ---------------------------------------------------------------------------------------------------*/ 
    
    /*Guest list table:
     * ------------------------------------------------------
     | GuestListID (Primary Key) | SchoolName | SchoolEmail | 
     *---------------------------*------------*-------------*
     *                           *            *             *
     *                           *            *             *
     *                           *            *             *
     *                           *            *             *
     -------------------------------------------------------*/
            
            
    
}