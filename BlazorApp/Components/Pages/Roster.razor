@page "/Roster"
@using Microsoft.AspNetCore.Components
@using System.Diagnostics
@using Structure
@using System.ComponentModel.DataAnnotations.Schema
@using System.Reflection.Metadata
@inject Structure.Roster rosterObj
@rendermode InteractiveServer



<PageTitle>My Roster</PageTitle>
<link rel="stylesheet" href="~BlazorApp/wwwroot/app.css" />
<h1 class="main-title">My Roster</h1>
    <div>
        <table  class="table" style="width: 100%; border-collapse: separate; border-radius: 20px; border-color: rgb(227,227,227);  ">
        <thead>
            <tr>
                <th>Last Name</th>
                <th>First Name</th>
                <th>Skill level</th>
                <th>Grade</th>
                <th></th>
                
            </tr>
        </thead>
        <tbody>
            @foreach (var item in rosterObj.rosterList)
            {
                @if (!item.Value.editing){
                    <tr  >
                        <td>@item.Key</td>
                        <td>@item.Value.firstName</td>
                        <td>@item.Value.skill</td>
                        <td>@item.Value.grade</td>
                        <td style="border: none"><button class="btn btn-secondary" @onclick=" ()=>toggleEdit(item.Value)">Edit</button></td>
                    </tr>
                }
                else {
                    <tr>
                        <td><input class="input-2" type="text" @bind="item.Value.lastName"/></td>
                        <td><input class="input-2" type="text" @bind="item.Value.firstName"/></td>
                        <td><input class="input-2" type="text" @bind="item.Value.skill"/></td>
                        <td><input class="input-2" type="text" @bind="item.Value.grade"/></td>
                        <td style="border: none" ><button class="btn btn-secondary" @onclick="()=>deleteWrestler(item.Value)" type="submit">Delete</button></td>
                        <td style="border: none"><button class="btn btn-secondary" @onclick=" ()=>toggleEdit(item.Value)" type="submit">Submit</button></td>
                    </tr>
                    
                }
            }
            <tr id="addRow" style="@displayMode">
                <td><input class="input-2" id="lastName" @bind="lastName" type="text" /></td>
                <td><input class="input-2" id="firstName" type="text" @bind="firstName" /></td>
                <td><input class="input-2" id="skill" type="text" @bind="skill"/> </td>
                <td><input class="input-2" id="grade" type="text" @bind="grade"></td>
                <td><input class="input-2" id="gender" type="text" @bind="gender"></td>
                
                <td><button @onclick="addWrestler" class="btn btn-primary" type="submit">Done</button></td>
                <td><button @onclick="cancelAdd" class="btn-secondary" type="submit">cancel</button></td>

            </tr>
            <tr>
                
                <td style="border: none"><button class="btn btn-primary" href="" @onclick="displayNewRow" type="submit">Add</button></td>
                
            </tr>
        </tbody>
        
    </table>

    </div>



@code{
    
    [Parameter]
    public EventCallback<bool> Edit{get;set;}
    
    public string lastName { get; set; }
    public string firstName { get; set; }
    public string skill { get; set; }
    public string grade { get; set; }
    public string gender { get; set; }
    public string schoolName { get; set; }

    private void deleteWrestler(Wrestler wrestler) {
        rosterObj.rosterList.Remove(wrestler.lastName);
        deleteButtonDisplayMode = "display: none;";
        StateHasChanged();
    }
    
    private void addWrestler() {
        
        Wrestler wrestler = new Wrestler(firstName,lastName,int.Parse(grade),int.Parse(skill),gender, rosterObj.schoolName);
        rosterObj.rosterList.Add(wrestler.lastName,wrestler);
        rosterObj.rosterList[lastName].editing = false;
        displayMode = "display: none;";



    }
    string deleteButtonDisplayMode = "display: none;";

    private void cancelAdd() {
        displayMode = "display: none;";
    }
    
    private void showDelete() {
        deleteButtonDisplayMode = "";
    }
    
    string displayMode = "display: none;";
    private void displayNewRow() {
        
        lastName = "";
        firstName="";
        skill="";
        grade="";
        gender = "";
        schoolName = "";
        displayMode = "";

    }

    //changed from 'private async Task' to 'private void'
    private void toggleEdit(Wrestler wrestler) {
        
        wrestler.editing=!wrestler.editing;
        
        StateHasChanged();
        
    }
    public void Add(){

    }

    public void sort(string value) {
        if (value == "Last Name") {
            
            
        }
    }
    
    /*
    public EventCallback Editing(string lastName){
        rosterObj.rosterList[lastName].editing=true;
        StateHasChanged();
    }
    */
    
    /*
    public EventCallback DoneEditing(string lastName){
        rosterObj.rosterList[lastName].editing=false;
        StateHasChanged();
    }
    */
    
}



