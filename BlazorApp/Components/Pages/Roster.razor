@page "/Roster"
@using Microsoft.AspNetCore.Components
@using System.Diagnostics
@using Structure
@using System.ComponentModel.DataAnnotations.Schema
@using System.Reflection.Metadata
@using DataAccessLibrary
@using DataAccessLibrary.Models
@inject Structure.Roster rosterObj
@using Structure
@using System.ComponentModel.DataAnnotations
@inject IWrestlerData _dba
@rendermode InteractiveServer
@inject Microsoft.JSInterop.IJSRuntime jsRuntime




<PageTitle>My Roster</PageTitle>
<link rel="stylesheet" href="~BlazorApp/wwwroot/app.css" />
<h1 class="main-title">My Roster</h1>
    <div>
        <table  class="table" style="width: 100%; border-collapse: separate;
         border-radius: 20px; border-color: rgb(227,227,227);  ">
        <thead>
            <tr>
                <th>Last Name</th>
                <th>First Name</th>
                <th>Skill level</th>
                <th>Grade</th>
                <th>Weight</th>
                <th>Gender</th>
                
            </tr>
        </thead>
        <tbody>
        @if (rosterObj2 != null)
        {
            @foreach (var item in rosterObj2.rosterList)
            {
                @if (!item.Value.editing)
                {
                    <tr >
                        <td>@item.Key</td>
                        <td>@item.Value.firstName</td>
                        <td>@item.Value.skillLevel</td>
                        <td>@item.Value.grade</td>
                        <td>@item.Value.weight</td>
                        <td>@item.Value.gender</td>
                        <td style="border: none"><button class="btn btn-secondary" @onclick=" () => toggleEdit(item.Value)">Edit</button></td>
                    </tr>
                }
                else
                {
                    <tr>
                        <td><input placeholder="last name" class="input-2" type="text" @bind="item.Value.lastName"/></td>
                        <td><input placeholder="first name" class="input-2" type="text" @bind="item.Value.firstName"/></td>
                        <td><input placeholder="skill level" class="input-2" type="text" @bind="item.Value.skillLevel"/></td>
                        <td><input placeholder="grade" class="input-2" type="text" @bind="item.Value.grade"/></td>
                        <td><input placeholder="weight" class="input-2" type="text" @bind="item.Value.weight"/></td>
                        <td><input placeholder="gender" class="input-2" type="text" @bind="item.Value.gender"/></td>
                        <td style="border: none"><button class="btn btn-secondary" @onclick="() => deleteWrestler(item.Value)" type="submit">Delete</button></td>
                        <td style="border: none"><button class="btn btn-secondary" @onclick=" () => toggleEdit(item.Value)" type="submit">Submit</button></td>
                    </tr>

                }
            }
        }
        else
        {
            <p>loading roster data</p>
        }
        <tr id="addRow" style="@displayMode">
            <td><input class="input-2" placeholder="last name" id="lastName" @bind="lastName" type="text"/></td>
            <td><input class="input-2" placeholder="first name" id="firstName" type="text" @bind="firstName"/></td>
            <td><input class="input-2" placeholder="skill level" id="skill" type="text" @bind="skill"/> </td>
            <td><input class="input-2" placeholder="grade" id="grade" type="text" @bind="grade"></td>
            <td><input class="input-2" placeholder="weight" id="weight" type="text" @bind="weight"></td>
            <td><input class="input-2" placeholder="gender" id="gender" type="text" @bind="gender"></td>

            <td><button @onclick="addWrestler" class="btn btn-primary" type="submit">Done</button></td>
            <td><button @onclick="cancelAdd" class="btn-secondary" type="submit">cancel</button></td>

        </tr>
        <tr>

            <td style="border: none"><button class="btn btn-primary" href="" @onclick="displayNewRow" type="submit">Add</button></td>

        </tr>
        </tbody>
        
    </table>

    </div>



@code{
    //Roster roster = new Roster();
    private Structure.Roster rosterObj2;
    
    protected override async Task OnInitializedAsync()
    {
        // Call CreateRoster to initialize rosterObj2
        await CreateRoster(_dba);
    }

    
    [Parameter]
    public EventCallback<bool> Edit{get;set;}
    
    public string lastName { get; set; }
    public string firstName { get; set; }
    public string skill { get; set; }
    public string grade { get; set; }
    public string gender { get; set; }
    public string weight { get; set; }
    public string schoolName { get; set; }
    
    

    
    
    private async Task deleteWrestler(Wrestler wrestler)
    {
        try
        {
            // Debugging statement to print the wrestler's ID
            Console.WriteLine($"Deleting wrestler with ID: {wrestler.wrestler_id}");
            
            // Remove the wrestler from the roster list
            rosterObj2.rosterList.Remove(wrestler.lastName);

            // Update UI
            deleteButtonDisplayMode = "display: none;";
            StateHasChanged();
            
            // Debugging statement: Print SQL query being executed
            Console.WriteLine($"Executing SQL query to delete wrestler with ID: {wrestler.wrestler_id}");

            // Delete the wrestler from the database
            await _dba.DeleteWrestler(wrestler.wrestler_id);
            
            // Debugging statement: Print confirmation message after deletion
            Console.WriteLine("Wrestler deleted successfully!");
        }
        catch (Exception ex)
        {
            // Handle any potential errors
            Console.WriteLine($"An error occurred while deleting the wrestler: {ex.Message}");
        }
    }


    private async Task addWrestler()
    {
        try
        {
            // Retrieve the profile ID from the cookie
            int? profileId = await GetSavedProfileID();
            
            // Print the retrieved profile ID for debugging
            if (profileId.HasValue)
            {
                Console.WriteLine($"Retrieved profile ID: {profileId.Value}");

                // Create a new WrestlerModel instance with the provided data
                WrestlerModel newWrestler = new WrestlerModel()
                {
                    profile_id = profileId.Value,
                    firstName = firstName,
                    lastName = lastName,
                    weight = int.Parse(weight), // Adjust weight value as needed
                    skillLevel = int.Parse(skill), // Adjust skillLevel value as needed
                    grade = int.Parse(grade),
                    gender = gender,
                    sameGenderOnly = false // Adjust sameGenderOnly value as needed
                };

                Wrestler wrestlerObj = new Wrestler() {
                    editing = false,
                    firstName = newWrestler.firstName,
                    gender = newWrestler.gender,
                    grade = newWrestler.grade,
                    lastName = newWrestler.lastName,
                    profile_id =newWrestler.profile_id,
                    sameGenderOnly = newWrestler.sameGenderOnly,
                    skillLevel = newWrestler.skillLevel,
                    weight = newWrestler.weight,
                    //wrestler_id = newWrestler.wrestler_id

                };
                rosterObj2.rosterList.Add(newWrestler.lastName, wrestlerObj);
                // Insert the new wrestler into the database
                int wrestlerID = await _dba.InsertWrestler(newWrestler);
                wrestlerObj.wrestler_id = wrestlerID;

                // Optionally, perform additional actions after successful insertion
                Console.WriteLine($"New wrestler inserted with ID: {wrestlerID}");
                displayMode = "display: none;";
                weight = "0";
                StateHasChanged();
            }
            else
            {
                Console.WriteLine("Invalid or missing profile ID.");
                // Optionally, display a message to the user or perform error handling
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding wrestler: {ex.Message}");
            // Handle any exceptions that occur during the database operation
        }
    }

    string deleteButtonDisplayMode = "display: none;";

    private void cancelAdd() {
        displayMode = "display: none;";
    }
    
    private void showDelete() {
        deleteButtonDisplayMode = "";
    }
    
    string displayMode = "display: none;";
    private void displayNewRow() {
        
        lastName = "";
        firstName="";
        skill="";
        grade="";
        gender = "";
        schoolName = "";
        displayMode = "";

    }

    //changed from 'private async Task' to 'private void'
    private async void toggleEdit(Wrestler wrestler) {
        
        
        wrestler.editing=!wrestler.editing;
        WrestlerModel newWrestler = new WrestlerModel() {
            profile_id = wrestler.profile_id,
            firstName = wrestler.firstName,
            lastName = wrestler.lastName,
            weight = wrestler.weight,
            skillLevel = wrestler.skillLevel,
            grade = wrestler.grade,
            gender = wrestler.gender,
            sameGenderOnly = wrestler.sameGenderOnly,
            wrestler_id = wrestler.wrestler_id
        };
        await _dba.UpdateWrestler(newWrestler);
        StateHasChanged();
        
    }
    public void Add(){

    }

    public void sort(string value) {
        if (value == "Last Name") {
            
            
        }
    }
    
    private async Task<int?> GetSavedProfileID()
    {
        string cookieName = "profile_id";

        try
        {
            // Invoke the 'getCookie' JavaScript function to retrieve the profile ID cookie value
            string profileIDCookie = await jsRuntime.InvokeAsync<string>("getCookie", cookieName);
            profileIDCookie = profileIDCookie?.Trim('"', ' '); // Trim removes leading/trailing quotation marks and spaces

            if (int.TryParse(profileIDCookie, out int profileID))
            {
                // Successful parsing: return the parsed profile ID
                return profileID;
            }
            else
            {
                // Invalid cookie value: log an error and return null
                Console.WriteLine("Invalid profile ID cookie value: " + profileIDCookie);
                return null;
            }
        }
        catch (Exception ex)
        {
            // Handle any JavaScript interop invocation errors
            Console.WriteLine($"Error retrieving profile ID cookie: {ex.Message}");
            return null;
        }
    }



    
    private async Task CreateRoster(IWrestlerData db)
    {
        try
        {
            // Retrieve the profile ID of the current user
            int? profileID = await GetSavedProfileID();

            if (profileID.HasValue)
            {
                // Create a roster object
                rosterObj2 = new Structure.Roster("schoolname");

                // Retrieve wrestlers from the database based on the user's profile ID
                var wrestlers = await _dba.GetWrestlersByProfileID(profileID.Value);

                // Add retrieved wrestlers to the roster
                foreach (var wrestler in wrestlers)
                {
                    rosterObj2.AddWrestler(wrestler.wrestler_id, wrestler.profile_id, wrestler.firstName, 
                        wrestler.lastName, wrestler.weight, wrestler.skillLevel, wrestler.grade, wrestler.gender, wrestler.sameGenderOnly);
                }
            }
            else
            {
                Console.WriteLine("Invalid or missing profile ID.");
            }
        }
        catch (Exception ex)
        {
            // Handle any exceptions that may occur
            Console.WriteLine("An error occurred: " + ex.Message);
        }
    }

    
    
    /*
    public EventCallback Editing(string lastName){
        rosterObj.rosterList[lastName].editing=true;
        StateHasChanged();
    }
    */
    
    /*
    public EventCallback DoneEditing(string lastName){
        rosterObj.rosterList[lastName].editing=false;
        StateHasChanged();
    }
    */
    
}



