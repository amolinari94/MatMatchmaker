@page "/Roster"
@using Microsoft.AspNetCore.Components
@using System.Diagnostics
@using Structure
@using System.ComponentModel.DataAnnotations.Schema
@using System.Reflection.Metadata
@using DataAccessLibrary
@using DataAccessLibrary.Models
@inject Structure.Roster rosterObj
@using Structure
@using System.ComponentModel.DataAnnotations
@inject IWrestlerData _dba
@rendermode InteractiveServer
@inject Microsoft.JSInterop.IJSRuntime jsRuntime



<PageTitle>My Roster</PageTitle>
<link rel="stylesheet" href="~BlazorApp/wwwroot/app.css" />
<h1 class="main-title">My Roster</h1>
    <div>
        <table  class="table" style="width: 100%; border-collapse: separate; border-radius: 20px; border-color: rgb(227,227,227);  ">
        <thead>
            <tr>
                <th>Last Name</th>
                <th>First Name</th>
                <th>Skill level</th>
                <th>Grade</th>
                <th></th>
                
            </tr>
        </thead>
        <tbody>
        @if (rosterObj2 != null)
        {
            @foreach (var item in rosterObj2.rosterList)
            {
                @if (!item.Value.editing)
                {
                    <tr >
                        <td>@item.Key</td>
                        <td>@item.Value.firstName</td>
                        <td>@item.Value.skill</td>
                        <td>@item.Value.grade</td>
                        <td style="border: none"><button class="btn btn-secondary" @onclick=" () => toggleEdit(item.Value)">Edit</button></td>
                    </tr>
                }
                else
                {
                    <tr>
                        <td><input class="input-2" type="text" @bind="item.Value.lastName"/></td>
                        <td><input class="input-2" type="text" @bind="item.Value.firstName"/></td>
                        <td><input class="input-2" type="text" @bind="item.Value.skill"/></td>
                        <td><input class="input-2" type="text" @bind="item.Value.grade"/></td>
                        <td style="border: none"><button class="btn btn-secondary" @onclick="() => deleteWrestler(item.Value)" type="submit">Delete</button></td>
                        <td style="border: none"><button class="btn btn-secondary" @onclick=" () => toggleEdit(item.Value)" type="submit">Submit</button></td>
                    </tr>

                }
            }
        }
        else
        {
            <p>loading roster data</p>
        }
        <tr id="addRow" style="@displayMode">
            <td><input class="input-2" id="lastName" @bind="lastName" type="text"/></td>
            <td><input class="input-2" id="firstName" type="text" @bind="firstName"/></td>
            <td><input class="input-2" id="skill" type="text" @bind="skill"/> </td>
            <td><input class="input-2" id="grade" type="text" @bind="grade"></td>
            <td><input class="input-2" id="gender" type="text" @bind="gender"></td>

            <td><button @onclick="addWrestler" class="btn btn-primary" type="submit">Done</button></td>
            <td><button @onclick="cancelAdd" class="btn-secondary" type="submit">cancel</button></td>

        </tr>
        <tr>

            <td style="border: none"><button class="btn btn-primary" href="" @onclick="displayNewRow" type="submit">Add</button></td>

        </tr>
        </tbody>
        
    </table>

    </div>



@code{
    //Roster roster = new Roster();
    private Structure.Roster rosterObj2;
    
    protected override async Task OnInitializedAsync()
    {
        // Call CreateRoster to initialize rosterObj2
        await CreateRoster(_dba);
    }

    
    [Parameter]
    public EventCallback<bool> Edit{get;set;}
    
    public string lastName { get; set; }
    public string firstName { get; set; }
    public string skill { get; set; }
    public string grade { get; set; }
    public string gender { get; set; }
    public string schoolName { get; set; }

    /*
    private void createRoster(ISqlDataAccess db) {
        Structure.Roster rosterObj2 = new Structure.Roster("schoolname");
        rosterObj2.rosterList = () => {
            foreach (var VARIABLE in db.LoadData< local storage email, roster table>()) {
                rosterObj2.rosterList.Add(@Email, );
            }
        };
    }
    */

    private void deleteWrestler(Wrestler wrestler) {
        
        rosterObj.rosterList.Remove(wrestler.lastName);
        deleteButtonDisplayMode = "display: none;";
        StateHasChanged();
    }
    
    private async void addWrestler() {
        
        string email = await GetSavedEmail();
        rosterObj.AddWrestler(email, firstName,lastName,int.Parse(grade),int.Parse(skill),gender);
        
        rosterObj.rosterList[lastName].editing = false;
        displayMode = "display: none;";
        WrestlerModel newWrestler = new WrestlerModel() {
            Email = email,
            FirstName = firstName,
            LastName = lastName,
            Gender = gender,
            Grade = int.Parse(grade),
            SchoolName = schoolName,
            Skill = int.Parse(skill)
        };
        await _dba.InsertWrestler(newWrestler);
        
        


    }
    string deleteButtonDisplayMode = "display: none;";

    private void cancelAdd() {
        displayMode = "display: none;";
    }
    
    private void showDelete() {
        deleteButtonDisplayMode = "";
    }
    
    string displayMode = "display: none;";
    private void displayNewRow() {
        
        lastName = "";
        firstName="";
        skill="";
        grade="";
        gender = "";
        schoolName = "";
        displayMode = "";

    }

    //changed from 'private async Task' to 'private void'
    private async void toggleEdit(Wrestler wrestler) {
        
        wrestler.editing=!wrestler.editing;
        WrestlerModel newWrestler = new WrestlerModel() {
            Email = wrestler.email,
            FirstName = wrestler.firstName,
            LastName = wrestler.lastName,
            Gender = wrestler.gender,
            Grade = wrestler.grade,
            SchoolName = wrestler.schoolName,
            Skill = wrestler.skill
        };
        await _dba.UpdateWrestler(newWrestler);
        StateHasChanged();
        
    }
    public void Add(){

    }

    public void sort(string value) {
        if (value == "Last Name") {
            
            
        }
    }
    
    private async Task<string> GetSavedEmail()
    {
        return await jsRuntime.InvokeAsync<string>("localStorage.getItem", "email");
    }
    
    private async Task CreateRoster(IWrestlerData db)
    {
        try
        {
            // Retrieve the email of the current user
            string email = await GetSavedEmail();
            email = email?.Trim('"');

            // Create a roster object
            rosterObj2 = new Structure.Roster("schoolname");

            // Retrieve wrestlers from the database based on the user's email
            var wrestlers = await _dba.GetWrestlersByEmail(email);

            // Add retrieved wrestlers to the roster
            foreach (var wrestler in wrestlers)
            {
                rosterObj2.AddWrestler(wrestler.Email, wrestler.FirstName, wrestler.LastName, wrestler.Skill, wrestler.Grade, wrestler.Gender);
            }
        }
        catch (Exception ex)
        {
            // Handle any exceptions that may occur
            Console.WriteLine("An error occurred: " + ex.Message);
        }
    }
    
    
    /*
    public EventCallback Editing(string lastName){
        rosterObj.rosterList[lastName].editing=true;
        StateHasChanged();
    }
    */
    
    /*
    public EventCallback DoneEditing(string lastName){
        rosterObj.rosterList[lastName].editing=false;
        StateHasChanged();
    }
    */
    
}



