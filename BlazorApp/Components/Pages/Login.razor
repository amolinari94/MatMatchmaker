@page "/Login"
@layout BlazorApp.Components.Layout.LandingLayout
@using BlazorApp.Models
@using DataAccessLibrary
@using Microsoft.AspNetCore.Antiforgery
@inject IProfileData _db
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager
@using Microsoft.AspNetCore.Antiforgery
@using Structure
@using Microsoft.JSInterop
@using System.Text.Json
@using Blazored.LocalStorage
@rendermode InteractiveServer
@inject ILocalStorageService _localStorage


<PageTitle>Login Page</PageTitle>

<div style="text-align: center;">
    <img src="Logo.png" width="250" height="150" style="display: inline-block; margin-top: 10px;">
</div>

<div class="login-box">
    <form @onsubmit="@_Login">
        <h1>Log In</h1>
        <div class="form-group">
            <label for="email">Email</label>
            <input  id="email" class="input-box" type="text" placeholder="Enter your email" @bind="email" required>
        </div>
        <div class="form-group">
            <label for="password">Password</label>
            <input id="password" class="input-box" type="password" placeholder="Enter your password" @bind="password" required>
        </div>
        <button type="submit" class="login-button">Login</button>
    </form>
</div>
@**<style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f4f4f4;
        }

        .center {
            text-align: center;
            padding-top: 20px;
        }

        .container {
            width: 300px;
            margin: 25px auto;
            background-color: #fff;
            padding: 20px;
            border-radius: 5px;
            box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
        }

        h2 {
            text-align: center;
            font-size: 24px;
        }
        
        input[type="submit"] {
            width: 100%;
            background-color: #007bff;
            color: #fff;
            padding: 10px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

            input[type="submit"]:hover {
                background-color: #0056b3;
            }
    </style>
<body>
<div style="text-align: center;">
    <img src="Logo.png" width="300" height="200" style="display: inline-block;">
</div>

<div class="center">
    <h2>Welcome to Mat Matchmaker! <br/>Please login or create an account!</h2>
</div>
<div class="container">
    <h1>Login</h1>
    <form @onsubmit="@_Login">
        <input class="input-SignUp" type="text" name="email" placeholder="Email" @bind="email" required>
        <input class="input-SignUp" type="password" name="password" placeholder="Password" @bind="password" required>
        <br><br/>
        <button type="submit" class="btn btn-primary">Login</button>
        <p><a href="/SignUp">Create an account</a></p>

    </form>


</div>
</body>**@

@code {
    [Inject]
    protected IAntiforgery _antiforgery { get; set; }
    private string email;
    private string password;
    
    [Inject]
    protected IJSRuntime _jsRuntime { get; set; }

    private async Task _Login()
    {
        // Print out the values of email and password for debugging
        Console.WriteLine($"Email: {email}, Password: {password}");
        
        // Retrieve user profile from the database based on the provided email
        var userProfile = await _db.AuthenticateUser(email, password);
        
        // Print out the userProfile for debugging
        Console.WriteLine($"User Profile: {userProfile.email}");

        if (userProfile != null && userProfile.password == password)
        {
            string profileIdString = userProfile.profile_id.ToString();
            // Store authentication token/session information (if applicable)
            await _jsRuntime.InvokeVoidAsync("setCookie", "profile_id", JsonSerializer.Serialize(profileIdString));
            //await _localStorage.SetItemAsync("email", email);
          /*  // Authentication successful, redirect to the desired page
            
            //initialize local profile object from user's database access
            string schoolName = "sql call goes here";
            string city = "sql call goes here";
            string state = "sql call goes here";
            string address = "sql call goes here";
            
            
            Profile profile = new Profile(email, schoolName, city, state, address);
            //List<Wrestler> wrestlerList = new List<Wrestler>();
            /*
             * populate wrestlerList from database
             */
            //foreach (var wrestler in wrestlerList) {
                //profile.school.roster.rosterList.Add(wrestler.lastName, new Wrestler());
          //  }
            
            
            
            
            NavigationManager.NavigateTo("/Roster");
        }
        else
        {
            // Authentication failed, display an error message
            Console.WriteLine("Invalid email or password.");
        }
    }
}