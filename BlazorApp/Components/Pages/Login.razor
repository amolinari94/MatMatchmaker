@page "/Login"
@using BlazorApp.Models
@using DataAccessLibrary
@using Microsoft.AspNetCore.Antiforgery
@inject IProfileData _db
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager
@using Microsoft.AspNetCore.Antiforgery

<PageTitle>Login Page</PageTitle>


<style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f4f4f4;
        }

        .center {
            text-align: center;
        }

        .container {
            width: 300px;
            margin: 100px auto;
            background-color: #fff;
            padding: 20px;
            border-radius: 5px;
            box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
        }

        h2 {
            text-align: center;
        }

        input[type="text"], input[type="password"] {
            width: 100%;
            padding: 10px;
            margin: 10px 0;
            border: 1px solid #ccc;
            border-radius: 5px;
            box-sizing: border-box;
        }

        input[type="submit"] {
            width: 100%;
            background-color: #007bff;
            color: #fff;
            padding: 10px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

            input[type="submit"]:hover {
                background-color: #0056b3;
            }
    </style>
<body>
<div class="center">
    <h2>Welcome to MatMatchmaker! Please login or create an account!</h2>
</div>
<div class="container">
    <h1>Login</h1>
    <form @onsubmit="@_Login">
        <input type="text" name="email" placeholder="Email" @bind="email" required>
        <input type="password" name="password" placeholder="Password" @bind="password" required>
        <input type="submit" value="Login">
        <p><a href="/SignUp">Create an account</a></p>
        
    </form>


</div>
</body>

@code {
    [Inject]
    protected IAntiforgery _antiforgery { get; set; }
    private string email;
    private string password;

    private async Task _Login()
    {
        // Print out the values of email and password for debugging
        Console.WriteLine($"Email: {email}, Password: {password}");
        
        // Retrieve user profile from the database based on the provided email
        var userProfile = await _db.AuthenticateUser(email, password);
        
        // Print out the userProfile for debugging
        Console.WriteLine($"User Profile: {userProfile}");

        if (userProfile != null && userProfile.PasswordHash == password)
        {
            // Authentication successful, redirect to the desired page
            NavigationManager.NavigateTo("/Roster");
        }
        else
        {
            // Authentication failed, display an error message
            Console.WriteLine("Invalid email or password.");
        }
    }
}