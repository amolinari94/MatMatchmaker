@page "/Login"
@using BlazorApp.Models
@using DataAccessLibrary
@using Microsoft.AspNetCore.Antiforgery
@inject IProfileData _db
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager
@using Microsoft.AspNetCore.Antiforgery
@using Structure
@using Microsoft.JSInterop
@using System.Text.Json
@using Blazored.LocalStorage
@rendermode InteractiveServer
@inject ILocalStorageService _localStorage


<PageTitle>Login Page</PageTitle>


<style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f4f4f4;
        }

        .center {
            text-align: center;
            padding-top: 20px;
        }

        .container {
            width: 300px;
            margin: 25px auto;
            background-color: #fff;
            padding: 20px;
            border-radius: 5px;
            box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
        }

        h2 {
            text-align: center;
            font-size: 24px;
        }

        

        input[type="submit"] {
            width: 100%;
            background-color: #007bff;
            color: #fff;
            padding: 10px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

            input[type="submit"]:hover {
                background-color: #0056b3;
            }
    </style>
<body>
<div style="text-align: center;">
    <img src="Logo.png" width="300" height="200" style="display: inline-block;">
</div>

<div class="center">
    <h2>Welcome to MatMatchmaker! <br/>Please login or create an account!</h2>
</div>
<div class="container">
    <h1>Login</h1>
    <form @onsubmit="@_Login">
        <input class="input-SignUp" type="text" name="email" placeholder="Email" @bind="email" required>
        <input class="input-SignUp" type="password" name="password" placeholder="Password" @bind="password" required>
        <br><br/>
        <button type="submit" class="btn btn-primary">Login</button>
        <p><a href="/SignUp">Create an account</a></p>
        
        @if (!string.IsNullOrEmpty(loginErrorMessage))
            {
                <p style="color: red;">@loginErrorMessage</p>
            }

    </form>


</div>
</body>

@code {
    
    private string email;
    private string password;
    private string loginErrorMessage; // Variable to hold the login error message
    
    [Inject]
    protected IJSRuntime _jsRuntime { get; set; }

    private async Task _Login()
    {
        // Reset the error message
        loginErrorMessage = null;

        // Retrieve user profile from the database based on the provided email
        var userProfile = await _db.AuthenticateUser(email, password);

        if (userProfile != null)
        {
            // Verify the password using bcrypt
            if (BCrypt.Net.BCrypt.Verify(password, userProfile.password))
            {
                string profileIdString = userProfile.profile_id.ToString();
                // Store authentication token/session information (if applicable)
                await _jsRuntime.InvokeVoidAsync("setCookie", "profile_id", JsonSerializer.Serialize(profileIdString));
            
                // Redirect to the desired page after successful authentication
                NavigationManager.NavigateTo("/Roster"); 
            
                return; // Exit the method after successful authentication
            }
        }

        // Authentication failed, display an error message
        loginErrorMessage = "Invalid email or password.";
    }
}