@page "/SignUp"
@layout BlazorApp.Components.Layout.LandingLayout

@using DataAccessLibrary.Models
@using BlazorApp.Models
@using DataAccessLibrary
@inject IProfileData _db

@rendermode InteractiveServer

<PageTitle>SignUp</PageTitle>

<div style="text-align: center;">
    <img src="Logo.png" width="250" height="150" style="display: inline-block; margin-top: 10px;">
</div>

<div class="signup-box">
<EditForm Model="@newProfile" OnSubmit="@InsertProfile">
    <h1>Sign Up</h1>
    <div class="form-group">
        <label for="email">Email</label>
        <InputText id ="email" class="input-box" placeholder="Enter your email" @bind-Value="newProfile.email"/>
    </div>
    <div class="form-group">
        <label for="password">Password</label>
        <InputText id="password" class="input-box" placeholder="Enter your password" @bind-Value="newProfile.password"/>
    </div>
    <div class="form-group">
        <label for="SchoolName">School Name</label>
        <InputText id="SchoolName" class="input-box" placeholder="Enter your school name" @bind-Value="newProfile.schoolName"/>
    </div>
    <div class="form-group">
        <label for="city">City</label>
        <InputText id="city" class="input-box" placeholder="Enter your city" @bind-Value="newProfile.city"/>
    </div>
    <div class="form-group">
        <label for="state">State</label>
        <InputText id="state" class="input-box" placeholder="Enter your state" @bind-Value="newProfile.state"/>
    </div>
    <button type="submit" class="submit-button">Submit</button>
</EditForm>
</div>


@**<Form>

    <table class="input-table" style="border-collapse: collapse; border-spacing: 0;">
        <tr>
            <td ><InputText placeholder="Email" class="input-SignUp" @bind-Value="localEmail"/></td>
        </tr>
        <tr>
            <td><InputText placeholder="Username" class="input-SignUp" @bind-Value="localUserName"/></td>
        </tr>
        <tr>
            <td><InputText placeholder="City" class="input-SignUp" @bind-Value="localCity"/></td>
        </tr>
        <tr>
            <td><InputText placeholder="State" class="input-SignUp" @bind-Value="localState"/></td>
        </tr>
        <tr>
            <td><InputText placeholder="School Name" class="input-SignUp" @bind-Value="localSchoolName"/></td>
        </tr>
        <tr>
            <td><InputText placeholder="Password" class="input-SignUp" @bind-Value="passwordTemp1"/></td>
        </tr>
        <tr>
            <td><InputText id="confirmPass" placeholder=@confirmPass class="input-SignUp" @bind-Value="passwordTemp2"/></td>
        </tr>
        <tr>
            <td colspan="2" style="text-align: center;"><!-- Adjust colspan as necessary -->
                <button class="btn btn-primary" @onclick="CheckPasswords" >Submit</button>
            </td>
        </tr>
    </table>

</Form> **@

@code {
    
    
    //private string localEmail, localUserName, localCity, localState, localSchoolName, passwordTemp1, passwordTemp2;
    private List<ProfileModel> profile;
    private DisplayProfileModel newProfile = new DisplayProfileModel();


    protected override async Task OnInitializedAsync()
    {
        profile = await _db.GetProfiles();
    }

    //private string passwordTemp1, passwordTemp2;

    private string confirmPass = "Confirm Password";



    /*private async Task CheckPasswords() {

        if (passwordTemp1 == passwordTemp2) {
            await InsertProfile();
        }else {
            confirmPass = "**Passwords must match**";
            passwordTemp2 = "";
        }
    }*/
    
    

    private async Task InsertProfile()
    {
        // Create a new instance of ProfileModel with the provided data
       /* ProfileModel newProfile = new ProfileModel
        {
            email = localEmail,
            password = passwordTemp1, // Assuming passwordTemp1 is the hashed password
            schoolName = localSchoolName,
            city = localCity,
            state = localState
        }; */

        try
        {
            // Create a ProfileModel instance from newProfile (DisplayProfileModel)
            var profileModel = new ProfileModel

            {
                email = newProfile.email,
                password = newProfile.password,
                schoolName = newProfile.schoolName,
                city = newProfile.city,
                state = newProfile.state
            };
            
            // Call the method to insert the new profile into the database
            await _db.InsertProfile(profileModel);

            // Optionally, perform additional actions after successful insertion
            Console.WriteLine($"Profile email: {newProfile.email}");

            // Clear form fields or navigate to another page upon successful insertion
            // Example: ClearForm();

            // Redirect to another page (e.g., home page)
             //NavigationManager.NavigateTo("/home");
        }
        catch (Exception ex)
        {
            // Handle any exceptions (e.g., database error)
            Console.WriteLine("Error inserting profile: " + ex.Message);
            // Display error message to the user, log the error, or perform appropriate error handling
        }
    }


}