@page "/Test"
@using DataAccessLibrary.Models
@using DataAccessLibrary
@using Microsoft.AspNetCore.Antiforgery
@inject IMatchData _dba
@using Microsoft.JSInterop
@inject IJSRuntime jsRuntime
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager
@using Microsoft.AspNetCore.Antiforgery
@using Structure
@using Microsoft.JSInterop
@using System.Text.Json
@using Blazored.LocalStorage
@inject IEventData eventData
@inject IEventData _db
@rendermode InteractiveServer

<h3>Test Events</h3>

<button @onclick="InsertTestEvent">Insert Test Event</button>

@if (events != null && events.Any())
{
    <h4>Events:</h4>
    <ul>
        @foreach (var ev in events)
        {
            <li>@ev.EventDate.ToShortDateString() - @ev.Location - @ev.Result</li>
            @if (ev.Matches != null && ev.Matches.Any())
            {
                <ul>
                    @foreach (var match in ev.Matches)
                    {
                        <li>Match: Wrestler1ID=@match.Wrestler1ID, Wrestler2ID=@match.Wrestler2ID, Result=@match.Result</li>
                    }
                </ul>
            }
        }
    </ul>
}

@code {
    private List<EventModel> events;
    private string debugMessage = "";

    private async Task InsertTestEvent()
    {
        debugMessage = "Inserting test event...";
        EventModel newEvent = new EventModel
        {
            EventDate = DateTime.Now,
            Location = "Test Location",
            Result = "Test Result",
            Matches = new List<MatchModel>
            {
                
                new MatchModel { Wrestler1ID = 3, Wrestler2ID = 4, Result = "Match 1 Result" },
                new MatchModel { Wrestler1ID = 8, Wrestler2ID = 9, Result = "Match 2 Result" }
                
            }
        };
        
        foreach (var match in newEvent.Matches)
        {
            Console.WriteLine($"Adding match: Wrestler1ID={match.Wrestler1ID}, Wrestler2ID={match.Wrestler2ID}, Result={match.Result}");
        }


        try
        {
            await eventData.InsertEvent(newEvent);
            await LoadEvents();
            // Optionally, set a success message or perform additional actions after successful insertion
        }
        catch (Exception ex)
        {
            // Log or handle the exception appropriately
            Console.WriteLine($"Error inserting event: {ex.Message}");
        }
    }

    private async Task LoadEvents()
    {
        events = await eventData.GetEvents();
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadEvents();
    }
}