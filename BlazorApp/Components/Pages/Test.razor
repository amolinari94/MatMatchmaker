@page "/Test"
@using DataAccessLibrary.Models
@using DataAccessLibrary
@using Microsoft.AspNetCore.Antiforgery
@inject IMatchData _dba
@using Microsoft.JSInterop
@inject IJSRuntime jsRuntime
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager
@using Microsoft.AspNetCore.Antiforgery
@using Structure
@using Microsoft.JSInterop
@using System.Text.Json
@using Blazored.LocalStorage
@inject IEventData eventData
@inject IEventData _dbe
@inject DataAccessLibrary.IEventData EventData
@rendermode InteractiveServer


@inject IProfileData profileData

@inject IEventGuestsData eventGuestData

@inject IWrestlerData WrestlerData

<h3>Wrestlers for Event</h3>

@if (matchesForEvent != null && matchesForEvent.Any())
{
    <table class="table">
        <thead>
        <tr>
            <th>Match ID</th>
            <th>Wrestler 1</th>
            <th>Wrestler 2</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var match in matchesForEvent)
        {
            <tr>
                <td>@match.match_id</td>
                <td>@($"{match.Wrestler1FirstName} {match.Wrestler1LastName}, {match.Wrestler1Weight} lbs")</td>
                <td>@($"{match.Wrestler2FirstName} {match.Wrestler2LastName}, {match.Wrestler2Weight} lbs")</td>

            </tr>
        }
        </tbody>
    </table>
}
else
{
    <p>No matches found for the specified event ID.</p>
}

@code {
    private List<MatchModel> matchesForEvent = new List<MatchModel>();
    public int eventId = 1;

    protected override async Task OnInitializedAsync()
    {
        matchesForEvent = await WrestlerData.GetMatchesForEvent(eventId);
    }
}
