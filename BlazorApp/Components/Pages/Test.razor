@page "/Test"
@using DataAccessLibrary.Models
@using DataAccessLibrary
@using Microsoft.AspNetCore.Antiforgery
@inject IMatchesData _dba
@using Microsoft.JSInterop
@inject IJSRuntime jsRuntime
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager
@using Microsoft.AspNetCore.Antiforgery
@using Structure
@using Microsoft.JSInterop
@using System.Text.Json
@using Blazored.LocalStorage
@inject IEventData eventData
@rendermode InteractiveServer

<h3>Test Events</h3>

<button @onclick="InsertEvent">Insert Test Event</button>

@if (events != null && events.Any())
{
    <h4>Events:</h4>
    <ul>
        @foreach (var ev in events)
        {
            <li>@ev.EventDate - @ev.Location - @ev.Result</li>
        }
    </ul>
}

@code {
    private List<EventModel> events;

    private async Task InsertEvent()
    {
        int wrestler1ID = 3;
        int wrestler2ID = 4;
        Console.WriteLine($"Wrestler1ID: {wrestler1ID}, Wrestler2ID: {wrestler2ID}");

        
        EventModel newEvent = new EventModel
        {
            EventDate = DateTime.Now,
            Location = "Test Location",
            Result = "Test Result",
            MatchId = 1,  // Replace with a valid MatchId from your database
            Wrestler1ID = wrestler1ID,
            Wrestler2ID = wrestler2ID
        };
        
        Console.WriteLine($"New Event: EventDate={newEvent.EventDate}, Location={newEvent.Location}, Result={newEvent.Result}, Wrestler1ID={newEvent.Wrestler1ID}, Wrestler2ID={newEvent.Wrestler2ID}");

        try
        {
            await eventData.InsertEvent(newEvent);
            await LoadEvents();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error inserting event: {ex.Message}");
        }
    }

    private async Task LoadEvents()
    {
        events = await eventData.GetEvents();
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadEvents();
    }
}