@page "/Test"
@using DataAccessLibrary.Models
@using DataAccessLibrary
@using Microsoft.AspNetCore.Antiforgery
@inject IMatchData _dba
@using Microsoft.JSInterop
@inject IJSRuntime jsRuntime
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager
@using Microsoft.AspNetCore.Antiforgery
@using Structure
@using Microsoft.JSInterop
@using System.Text.Json
@using Blazored.LocalStorage
@inject IEventData eventData
@inject IEventData _db
@rendermode InteractiveServer

<h3>Test Events</h3>

<button @onclick="InsertTestEvent">Insert Test Event</button>

@if (events != null && events.Any())
{
    <ul>
        @foreach (var ev in events)
        {
            <li>
                @ev.EventDate.ToShortDateString() - @ev.Location - @ev.Result
                @if (ev.Matches != null && ev.Matches.Any())
                {
                    <ul>
                        @foreach (var match in ev.Matches)
                        {
                            <li>Match: Wrestler1ID=@match.Wrestler1ID, Wrestler2ID=@match.Wrestler2ID, Result=@match.Result</li>
                        }
                    </ul>
                }
                <button @onclick="() => LoadMatchesForEvent(ev.EventID)">Load Matches</button>
            </li>
        }
    </ul>
}

@if (selectedEventId.HasValue && eventMatches != null && eventMatches.Any())
{
    <h4>Matches for Event: @selectedEventId</h4>
    <ul>
        @foreach (var match in eventMatches)
        {
            <li>Match: Wrestler1ID=@match.Wrestler1ID, Wrestler2ID=@match.Wrestler2ID, Result=@match.Result</li>
        }
    </ul>
}

@code {
    private List<EventModel> events;
    private int? selectedEventId;
    private List<MatchModel> eventMatches;

    protected override async Task OnInitializedAsync()
    {
        await LoadEvents();
    }

    private async Task LoadEvents()
    {
        events = await eventData.GetEvents();
    }

    private async Task InsertTestEvent()
    {
        EventModel newEvent = new EventModel
        {
            EventDate = DateTime.Now,
            Location = "Test Location",
            Result = "Test Result",
            Matches = new List<MatchModel>
            {
                new MatchModel { Wrestler1ID = 3, Wrestler2ID = 4, Result = "Match 1 Result" },
                new MatchModel { Wrestler1ID = 8, Wrestler2ID = 9, Result = "Match 2 Result" }
            }
        };

        try
        {
            await eventData.InsertEvent(newEvent);
            await LoadEvents(); // Refresh the events list after insertion
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error inserting event: {ex.Message}");
        }
    }

    private async Task LoadMatchesForEvent(int eventId)
    {
        eventMatches = await eventData.GetMatchesForEvent(eventId);
        selectedEventId = eventId; // Set selected event ID to display matches
    }
}