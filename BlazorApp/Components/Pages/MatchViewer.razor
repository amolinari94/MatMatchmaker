@page "/MatchViewer"
@using Microsoft.AspNetCore.Components
@using System.Diagnostics
@using Structure
@using System.ComponentModel.DataAnnotations.Schema
@using System.Reflection.Metadata
@rendermode InteractiveServer


<h3>MatchViewer</h3>




<div>
        <table  class="table" style="width: 100%; border-collapse: separate; border-radius: 20px; border-color: rgb(227,227,227); " ondragover="event.preventDefault();">
        <thead>
            <tr>
                <th></th>
                <th>Name</th>
                <th>Gndr</th>
                <th>Wgt</th>
                <th>Skill</th>
                <th>Grade</th>
                <th></th>
                
                
            </tr>
        </thead>
        <tbody>
            @foreach(var item in Models.OrderBy(x => x.Order)){
                 
                <tr @key="item" class="pb-2 relative" @ondragstart="() => draggingModel = item" @ondragend="()=> draggingModel = null" draggable="true"  @ondrop="()=>HandleDrop(item)">
                    
                        <td></td>
                        <td>@item.Name@*.match[0].firstName</td>
                        <td>@item.match[0].gender</td>
                        <td>@item.match[0].weight</td>
                        <td>@item.match[0].skill</td>
                        <td>@item.match[0].grade*@</td>
          	
			
                  
                   
                </tr> 
                
                
            }    
             
        </tbody>
        </table>
        </div>





@code {
    
    public string lastName { get; set; }
    public string firstName { get; set; }
    public string skill { get; set; }
    public string grade { get; set; }
    public string gender { get; set; }
    public string schoolName { get; set; }
    public bool matchschool {get;set; }
    
    public int diff {get;set;}

    public int skillDiff{get;set;}

    public int gradeDiff {get;set;}

    public int weightMax {get;set;}

    public int weightMin{get;set;}
    public int index=0;
     private List<Model> Models { get; } = [];

     private class Model
     {
         public int Order { get; set; }
         public string Name { get; set; } = "";
         public bool IsDragOver { get; set; }
         @*protected internal Wrestler[] match {get;set;}=[];*@
     }
     private Model? draggingModel;//the model that is being dragged

     protected override void OnInitialized()
     {//fill names wit "random" string
         for (var i = 0; i < 10 @*testEvent.matchList.Length*@; i++)
         {
             Model m = new() { Order = i, Name = $"Item {i}"@*, match=testEvent.matchList[i]*@};
             Models.Add(m);
         }
         base.OnInitialized();
     }
     private void HandleDrop(Model landingModel)
     {//landing model -> where the drag happened
		
		
         if (draggingModel is null)
         {
             Console.WriteLine("Null issue");
             return;
			
         }
		
         int originalOrderLanding = landingModel.Order;//keep the original order for later
         //increase model uned by 1
         Models.Where(x => x.Order >= landingModel.Order).ToList().ForEach(x => x.Order++);
         draggingModel.Order = originalOrderLanding;//replace landing model
         int ii = 0;
         foreach (var model in Models.OrderBy(x => x.Order).ToList())
         {
             model.Order = ii++;//keep the numbers from 0 to size-1
             model.IsDragOver = false;//remove drag over.
         }
     }


     public void addMatch(School school1, School school2) {
         Wrestler[] match = new Wrestler[2];
         Wrestler first;
         Structure.Roster roster1 = school1.roster;
         Structure.Roster roster2 = school2.roster;
         foreach (var item in roster1.rosterList) {
             if (item.Value.weight <= weightMin || item.Value.weight >= weightMax) {
                 continue;
             }

             first = item.Value;

             foreach (var item2 in roster2.rosterList) {

                 Wrestler second = item2.Value;
                 if (second.weight <= weightMin || second.weight >= weightMax) {
                     continue;
                 }

                 //Checks to see if the people are not the same gender, and if not, checks if either wrestler can't wrestle the other gender
                 if (first.gender != second.gender && (!first.sameGenderOnly || !second.sameGenderOnly)) {
                     continue;
                 }

                 if (Math.Abs(second.weight - first.weight) > diff) {
                     continue;
                 }

                 if (Math.Abs(second.grade - first.grade) > gradeDiff) {
                     continue;
                 }

                 if (Math.Abs(second.skillLevel - first.skillLevel) > skillDiff) {
                     continue;
                 }

                 match.Append(first);
                 match.Append(second);
             }

         }
     }

}